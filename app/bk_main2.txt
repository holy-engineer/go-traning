// package main

// //構造体を使用し、構造体自体を引数で受け取る書き方

// import (
// 	"encoding/csv"
// 	"fmt"
// 	"github.com/gin-gonic/gin"
// 	"io"
// 	"os"
// )

// type Adress struct {
// 	Prefecture     string `json:"都道府県"`
// 	Municipalities string `json:"市区町村"`
// 	Town           string `json:"町名"`
// }

// type PostInfo struct {
// 	PostalCode string `json:"郵便番号"`
// 	Adress     `json:"住所"`
// }

// func searchAdress(postalCode string) Adress {
// 	f, _ := os.Open("./KEN_ALL.csv")
// 	r := csv.NewReader(f)
// 	adress := Adress{}

// 	for {
// 		record, err := r.Read()
// 		if err == io.EOF {
// 			fmt.Printf("IO ERROR")
// 			break
// 		}
// 		if record[2] == postalCode {
// 			prefecture, municipalities, town := record[6], record[7], record[8]
// 			if record[8] == "以下に掲載がない場合" {
// 				town = ""
// 			}
// 			adress = Adress{prefecture, municipalities, town}
// 			break
// 		}
// 	}
// 	return adress
// }

// func main() {
// 	router := gin.Default()

// 	router.GET("/search", func(ctx *gin.Context) {
// 		postalCode := ctx.Query("id")
// 		postInfo := PostInfo{postalCode, searchAdress(postalCode)}
// 		ctx.JSON(200, postInfo)
// 	})

// 	err := router.Run(":8080")
// 	if err == nil {
// 		fmt.Printf("ROUTER RUN ERROR")
// 	}
// }
